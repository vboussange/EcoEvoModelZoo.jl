var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = EcoEvoModelZoo","category":"page"},{"location":"#EcoEvoModelZoo","page":"Home","title":"EcoEvoModelZoo","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for EcoEvoModelZoo.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [EcoEvoModelZoo]","category":"page"},{"location":"#EcoEvoModelZoo.AkessonModel","page":"Home","title":"EcoEvoModelZoo.AkessonModel","text":"This model is inspired from Akesson et al. 2021.\n\nSpecialized variants are provided in other AbstractModels.\n\n\n\n\n\n","category":"type"},{"location":"#EcoEvoModelZoo.EcoEvoGraph","page":"Home","title":"EcoEvoModelZoo.EcoEvoGraph","text":"This model is inspired from Boussange & Pellissier. 2022\n\nArguments\n\nmp: the model parameters\ng: the spatial graph\nphen_space: the discretized phenotypic space\nbirth_fn: the birth function. Should be of the form birth_fn(x, s, p)\ncompetition_fn: the competition function. Should be of the form competition_fn(u_xs2, x, s1, s2, p)\n\nMathematical model\n\n∂ₜuˣ(s) = uˣ(s)[birth_fn(x, s, p) - uˣ(s)∫competition_fn(uˣ(s₂), x, s, s₂, p) ds₂] + 1/2 μ σ² Δₛuˣ(s) + m L u(s)\n\nwhere L is the Laplacian matrix of the spatial graph g.\n\nExample 1\n\nusing ParametricModels\nusing UnPack\nusing DocStringExtensions\nusing Statistics\nusing ComponentArrays\nusing Distributions\nusing OrdinaryDiffEq\nusing UnPack\n## Defining phenotypic space and spatial graph\nM = 7\ng = star_graph(M)\n\nrS = 1f0\ndS = 0.02f0\nphen_space = collect(range(-rS,rS,step=dS)) #grid\n\n##\n# Defining birth and competition functions\nsoptim = 0.5f0 * [-1,1,-1,1,-1,1,-1]\nbirth_fn(x, s, p) = max(0f0, 1f0 - (soptim[x] - s)^2)\ncompetition_fn(u_xs2, x, s1, s2, p) = u_xs2 ./ p.K\n\n## Defining parameters\nσ_mu = 5f-2;\nmu = 0.1f0\nm = 0.1\nK = 1.\n\np = ComponentArray(σ_mu = σ_mu,\n                    mu = mu,\n                    m = m,\n                    K = K)\n\n\n## rest of the simulation\ntend = 1000f0\ntspan = (0f0,tend)\ntsteps = (tspan[1]):1.:(tspan[end])\nu0 = vcat([K .* pdf.(Normal(so,σ_mu),phen_space') for so in soptim]...)\n\nmp = ModelParams(;p,\n                tspan,\n                u0,\n                alg=Tsit5(),\n                saveat = tsteps)\n\nmodel = EcoEvoGraph(mp, g, phen_space, birth_fn, competition_fn)\n\n@time sol = simulate(model)\n\n# Plotting results!\nusing PythonCall; plt = pyimport(\"matplotlib.pyplot\")\nfig, ax = plt.subplots(1)\nax.plot(model.phen_space, sol[end][1,:], color = \"tab:red\", label = \"Node 1\")\nax.plot(model.phen_space, sol[end][2,:], color = \"tab:blue\", label = \"Node 2\")\nax.set_xlabel(\"Phenotype\")\nax.set_ylabel(\"Population number\")\ndisplay(fig)\n\nExample 2: trait dependent competition\n\n# Trait dependent compeition\nrS = 3f0\ndS = 0.02f0\nphen_space = collect(range(-rS,rS,step=dS)) #grid\n\np = ComponentArray(σ_mu = σ_mu,\n                    mu = mu,\n                    m = m,\n                    K = K,\n                    σ_α = 0.5)\n# trait dependent competition\ncompetition_fn(u_xs2, x, s1, s2, p) = u_xs2 * exp(- 0.5f0 * (s1 - s2)^2 ./ p.σ_α^2) ./ p.K\n\nu0 = vcat([K .* pdf.(Normal(so,σ_mu),phen_space') for so in soptim]...)\n\nmp = ModelParams(;p,\n                tspan,\n                u0,\n                alg=Tsit5(),\n                saveat = tsteps)\nmodel = EcoEvoGraph(mp, g, phen_space, birth_fn, competition_fn)\n\nsol = simulate(model)\nfig, ax = plt.subplots(1)\nax.set_title(\"Trait-dependent competition\")\nax.plot(model.phen_space, sol[end][1,:], color = \"tab:red\", label = \"Node 1\")\nax.plot(model.phen_space, sol[end][2,:], color = \"tab:blue\", label = \"Node 2\")\nax.set_xlabel(\"Phenotype\")\nax.set_ylabel(\"Population number\")\ndisplay(fig)\n\n\n\n\n\n","category":"type"},{"location":"#EcoEvoModelZoo.EcosystemModelMcCann","page":"Home","title":"EcoEvoModelZoo.EcosystemModelMcCann","text":"EcosystemModelMcKann\n\nThis model is inspired from McCann 1994.  Similar to EcosystemModelOmnivory, but without monivory.\n\n\n\n\n\n","category":"type"},{"location":"#EcoEvoModelZoo.EcosystemModelOmnivory","page":"Home","title":"EcoEvoModelZoo.EcosystemModelOmnivory","text":"EcosystemModelOmnivory\n\nThis model is inspired from McCann 1997.\n\n\n\n\n\n","category":"type"},{"location":"#EcoEvoModelZoo.Landscape","page":"Home","title":"EcoEvoModelZoo.Landscape","text":"Returns landscape parameters\n\n\n\n\n\n","category":"type"},{"location":"#EcoEvoModelZoo.ResourceCompetition","page":"Home","title":"EcoEvoModelZoo.ResourceCompetition","text":"This model is inspired from Huisman et al. 1999 Nature.\n\n\n\n\n\n","category":"type"},{"location":"#EcoEvoModelZoo.ResourceCompetitionSmoothMin","page":"Home","title":"EcoEvoModelZoo.ResourceCompetitionSmoothMin","text":"This model is inspired from Huisman et al. 1999 Nature.,  but where Leibig's law is replaced by  imperfect substituable resources (smooth minimum). The smooth min function is parametrized by  s, which is a trainable parameter.\n\n\n\n\n\n","category":"type"},{"location":"#EcoEvoModelZoo.SimpleEcosystemModel","page":"Home","title":"EcoEvoModelZoo.SimpleEcosystemModel","text":"Based on Watson et al 2015 for fish dynamics and Steele and Henderson 1981 for the nutrient phytoplankton zooplankton dymamics.\n\n\n\n\n\n","category":"type"},{"location":"#EcoEvoModelZoo.Temperature","page":"Home","title":"EcoEvoModelZoo.Temperature","text":"Temperature as a function of space (x), time (t), and some climate parameters\n\n\n\n\n\n","category":"type"},{"location":"#EcoEvoModelZoo.funcresp!-Tuple{Any, Any, Any, Trophic{true}}","page":"Home","title":"EcoEvoModelZoo.funcresp!","text":"funcresp!(F, n, p, _)\n\n\nType II functional response Input:\n\nn: Vector of population densities of all species in a given patch\nTh: Vector of handling times (with dummy values for resource species)\narate: Vector of attack rates (with dummy values for resource species)\nW: Adjacency matrix of trophic network; W(i,j)=1 if i eats j and 0 otherwise\n\nOutput:\n\nA matrix F(i,j), the feeding rate of consumer i on resource j\n\n\n\n\n\n","category":"method"},{"location":"#EcoEvoModelZoo.generate_network-Tuple{Int64, Int64}","page":"Home","title":"EcoEvoModelZoo.generate_network","text":"generate_network(SR::Int, SC::Int)\n\nreturn matrix W[i,j], which is nonzero if consumer i eats resource j SR is the number of resource, SC the number of consumer species.\n\nThe bipartite network is generated as follows.  First, both resources and consumers are labeled consecutively,  based on their initial temperature adaptations:  resource 1 / consumer 1 are the most cold-adapted,  and resource S / consumer S the most warm-adapted.  Next, we always put a feeding link between consumer i and resource i.  Finally, each consumer is randomly linked to four other resource species.  This yields a feeding network where every consumer is  connected to five resources altogether.\n\nNote: it seems that the definition of W_ij is that it determines which resource i is eat by consumer j\n\n\n\n\n\n","category":"method"},{"location":"#EcoEvoModelZoo.init_params_akesson_model-Union{Tuple{Tr}, Tuple{CP}, Tuple{WG}, Tuple{Landscape, Temperature, Any, Any}} where {WG, CP, Tr}","page":"Home","title":"EcoEvoModelZoo.init_params_akesson_model","text":"init_params_akesson_model(\n    land,\n    temp,\n    SR,\n    SC;\n    width_growth,\n    competition,\n    trophic,\n    vbar,\n    dbar,\n    kappa,\n    eta,\n    nmin,\n    aw,\n    bw,\n    w\n)\n\n\nReturns a Dictionary with all biological parameters for Akesson model.\n\nArguments\n\nmodel_type: can take values \"normal\", \"Tdep\", \"Tdep_trophic\" and \"trophic\".\n\n\n\n\n\n","category":"method"},{"location":"#EcoEvoModelZoo.smoothstep-Tuple{Any}","page":"Home","title":"EcoEvoModelZoo.smoothstep","text":"Apply twice continuously differentiable smoothed step function to a number x Input: x: Distance from pole, measured in units of the pole-to-equator distance Output: 0 if x < 0; 10x^3-15x^4+6*x^5 if 0 <= x <= 1; otherwise 1\n\n\n\n\n\n","category":"method"}]
}
